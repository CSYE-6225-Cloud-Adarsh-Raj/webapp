name: Packer Build

on:
  # workflow_run:
  #   workflows: ["Go Test"]
  #   branches: [ "main" ]
  #   types:
  #     - completed
  pull_request:
    branches: [ "main" ]

    
jobs:
  build-and-upload-binary:
    # if: github.repository == 'CSYE-6225-Cloud-Adarsh-Raj/webapp' && github.event.workflow_run.conclusion == 'success'
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        path: webapp
      
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21.6'

    - name: Build dependencies
      run: go mod tidy
      working-directory: ./webapp

    - name: Build Go application
      run: |
        CGO_ENABLED=0 go build -v -a -installsuffix cgo -o ./webapp .
      working-directory: ./webapp

    - name: Upload Go binary as an artifact
      uses: actions/upload-artifact@v4
      with:
        name: webapp-binary
        path: ./webapp/webapp

  build-packer-image:
    # environment: Deploy
    needs: build-and-upload-binary
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code again
      uses: actions/checkout@v4

    - name: Download Go binary artifact
      uses: actions/download-artifact@v4
      with:
        name: webapp-binary
        path: ./artifact

    - name: Make binary executable
      run: |
          chmod +x ./artifact/webapp
      
    - name: Authenticate to GCP
      uses: google-github-actions/auth@v2
      with:
        credentials_json: '${{ secrets.GCP_CREDENTIALS }}'

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2

    - name: Use gcloud CLI
      run: gcloud info

    # - name: Install Packer
    #   run: |
    #     curl -O https://releases.hashicorp.com/packer/1.7.4/packer_1.7.4_linux_amd64.zip
    #     unzip -o packer_1.7.4_linux_amd64.zip -d /tmp
    #     sudo rm -f /usr/local/bin/packer
    #     sudo mv /tmp/packer /usr/local/bin
    # - name: Debug current working directory packer build
    #   run: |
    #     pwd
    #     ls -la
    # - name: List contents of the custom_image directory
    #   run: ls -la
    #   working-directory: ./custom_image

    # - name: Packer init
    #   run: |
    #     packer init webapp_image.pkr.hcl
    #   working-directory: ./custom_image


    # - name: Run Packer to build the image
    #   run: |
    #     # packer build -var "binary_path=${BINARY_PATH}" webapp_image.pkr.hcl
    #     # IMAGE_NAME=$(packer build -var "binary_path=${BINARY_PATH}" webapp_image.pkr.hcl | grep 'A relevant grep to find your image name')
    #     # IMAGE_NAME=$(packer build -var "binary_path=${BINARY_PATH}" webapp_image.pkr.hcl | grep -o 'webapp-golden-[0-9]\+-[0-9]\+-[0-9]\+-[0-9]\+-[0-9]\+--image')
    #     # echo "PACKER_IMAGE_NAME=$IMAGE_NAME" >> $GITHUB_ENV
    #     # echo "::set-output name=PACKER_IMAGE_NAME::$IMAGE_NAME"
    #     IMAGE_NAME=$(packer build -var "binary_path=${BINARY_PATH}" webapp_image.pkr.hcl | tee /dev/tty | grep -o 'webapp-golden-[0-9]\+-[0-9]\+-[0-9]\+-[0-9]\+-[0-9]\+--image')
    #     if [ -z "$IMAGE_NAME" ]; then
    #       echo "Failed to extract image name from Packer output."
    #       exit 1
    #     fi
    #   working-directory: ./custom_image
    #   env:
    #     BINARY_PATH: ../artifact/webapp
    #uncomment later
    # - name: Create dummy packer output file
    #   run: |
    #     touch ./packer_output.txt
    #   working-directory: ./custom_image

    # - name: Debug current working directory 1
    #   run: |
    #     pwd

    # - name: Run Packer to build the image
    #   run: |
    #     packer build -var "binary_path=${BINARY_PATH}" webapp_image.pkr.hcl | tee packer_output.txt
    #   working-directory: ./custom_image
    #   env:
    #     BINARY_PATH: ../artifact/webapp
    
    # - name: Debug current working directory 2
    #   run: |
    #     pwd

    # - name: Display packer_output.txt content
    #   run: cat packer_output.txt
    #   working-directory: ./custom_image
      
    - name: Extract image name
      run: |
        ls -alrt
        pwd
        # IMAGE_NAME=$(grep -o 'webapp-golden-[0-9]\+-[0-9]\+-[0-9]\+-[0-9]\+-[0-9]\+--image' packer_output.txt)
        # IMAGE_NAME=$(grep -Eo 'webapp-golden-[0-9]{4}-[0-9]{2}-[0-9]{2}-[0-9]{2}-[0-9]{2}-[0-9]{2}--image' packer_output.txt)
        IMAGE_NAME="webapp-golden-2024-04-08-19-58-36--image"
        if [ -z "$IMAGE_NAME" ]; then
          echo "Failed to extract image name from Packer output."
          exit 1
        fi
        echo "PACKER_IMAGE_NAME=$IMAGE_NAME" >> $GITHUB_ENV

        echo "::set-output name=PACKER_IMAGE_NAME::$IMAGE_NAME"
      working-directory: ./custom_image
    
    # - name: Describe the managed instance group
    #   id: describe_instance_group
    #   run: |
    #     OUTPUT=$(gcloud compute instance-groups managed describe $INSTANCE_GROUP_NAME --region $REGION --format="value(versions[0].instanceTemplate)")
    #     echo "Instance template URL: $OUTPUT"
    #     echo "::set-output name=instance_template_url::$OUTPUT"
    #   env:
    #     # GCP_PROJECT: csye6225-dev-414220
    #     REGION: us-east1
    #     INSTANCE_GROUP_NAME: webapp-group

    # - name: Describe the instance template
    #   run: |
    #     INSTANCE_TEMPLATE_URL="${{ steps.describe_instance_group.outputs.instance_template_url }}"
    #     gcloud compute instance-templates describe $INSTANCE_TEMPLATE_URL --format=json > existing_template_config.json
    #     # ls -alrt
    #     # pwd
    #     chmod +x existing_template_config.json
    #   working-directory: ./custom_image

    - name: Set executable permission for create template script
      run: |
        # ls -alrt
        # pwd
        chmod +x create_new_template.sh
      working-directory: ./custom_image

    - name: Execute gcloud create instance script
      env: 
        PACKER_IMAGE_NAME: ${{ env.PACKER_IMAGE_NAME }}
        GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
        INSTANCE_GROUP_NAME: ${{ secrets.INSTANCE_GROUP_NAME }}
        MACHINE_TYPE: ${{ secrets.MACHINE_TYPE }}
        DISK_SIZE_GB:  ${{ secrets.DISK_SIZE_GB }}
        DISK_TYPE:  ${{ secrets.DISK_TYPE }}
        REGION:  ${{ secrets.REGION }}
        NETWORK:  ${{ secrets.NETWORK }}
        SUBNET:  ${{ secrets.SUBNET }}
        TAGS:  ${{ secrets.TAGS }}
        SERVICE_ACCOUNT_EMAIL:  ${{ secrets.SERVICE_ACCOUNT_EMAIL }}
        SCOPES:  ${{ secrets.SCOPES }}
      # id: create_instance_template
      run: |
        ./create_new_template.sh
        # OUTPUT_TEMP=$(./create_new_template.sh)
        # echo "New template created: $OUTPUT"
        # echo "::set-output name=new_template_name::$OUTPUT_TEMP"
      working-directory: ./custom_image
      
        
    - name: Poll for the update operation status
      run: |
        if gcloud compute instance-groups managed wait-until --version-target-reached --region=${{ secrets.REGION }} ${{ secrets.INSTANCE_GROUP_NAME }}; then
          echo "Version target reached successfully."
        else
          echo "Failed to reach version target within the timeout period."
          exit 1
        fi
      # env: 
      #   # PACKER_IMAGE_NAME: ${{ env.PACKER_IMAGE_NAME }}
      #   PACKER_IMAGE_NAME: ${{ env.PACKER_IMAGE_NAME }}
      #   GCP_PROJECT_ID: ${{ vars.GCP_PROJECT_ID }}
      #   INSTANCE_GROUP_NAME: ${{ vars.INSTANCE_GROUP_NAME }}
      #   MACHINE_TYPE: ${{ vars.MACHINE_TYPE }}
      #   DISK_SIZE_GB:  ${{ vars.DISK_SIZE_GB }}
      #   DISK_TYPE:  ${{ vars.DISK_TYPE }}
      #   REGION:  ${{ vars.REGION }}
      #   NETWORK:  ${{ vars.NETWORK }}
      #   SUBNET:  ${{ vars.SUBNET }}
      #   TAGS:  ${{ vars.TAGS }}
      #   SERVICE_ACCOUNT_EMAIL:  ${{ vars.SERVICE_ACCOUNT_EMAIL }}
      #   SCOPES:  ${{ vars.SCOPES }}
        
