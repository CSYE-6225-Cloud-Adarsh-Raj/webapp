name: Packer Build

on:
  workflow_run:
    workflows: ["Go Test"]
    branches: [ "main" ]
    types:
      - completed
    
jobs:
  build-and-upload-binary:
    if: github.repository == 'CSYE-6225-Cloud-Adarsh-Raj/webapp' && github.event.workflow_run.conclusion == 'success'
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        path: webapp
      
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21.6'

    - name: Build dependencies
      run: go mod tidy
      working-directory: ./webapp

    - name: Build Go application
      run: |
        CGO_ENABLED=0 go build -v -a -installsuffix cgo -o ./webapp .
      working-directory: ./webapp

    - name: Upload Go binary as an artifact
      uses: actions/upload-artifact@v4
      with:
        name: webapp-binary
        path: ./webapp/webapp

  build-packer-image:
    needs: build-and-upload-binary
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code again
      uses: actions/checkout@v4

    - name: Download Go binary artifact
      uses: actions/download-artifact@v4
      with:
        name: webapp-binary
        path: ./artifact

    - name: Make binary executable
      run: |
          chmod +x ./artifact/webapp
      
    - name: Authenticate to GCP
      uses: google-github-actions/auth@v2
      with:
        credentials_json: '${{ secrets.GCP_CREDENTIALS }}'

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2

    - name: Use gcloud CLI
      run: gcloud info

    - name: Install Packer
      run: |
        curl -O https://releases.hashicorp.com/packer/1.7.4/packer_1.7.4_linux_amd64.zip
        unzip -o packer_1.7.4_linux_amd64.zip -d /tmp
        sudo rm -f /usr/local/bin/packer
        sudo mv /tmp/packer /usr/local/bin
    - name: Debug current working directory packer build
      run: |
        pwd
        ls -la
    - name: List contents of the custom_image directory
      run: ls -la
      working-directory: ./custom_image

    - name: Packer init
      run: |
        packer init webapp_image.pkr.hcl
      working-directory: ./custom_image


    # - name: Run Packer to build the image
    #   run: |
    #     # packer build -var "binary_path=${BINARY_PATH}" webapp_image.pkr.hcl
    #     # IMAGE_NAME=$(packer build -var "binary_path=${BINARY_PATH}" webapp_image.pkr.hcl | grep 'A relevant grep to find your image name')
    #     # IMAGE_NAME=$(packer build -var "binary_path=${BINARY_PATH}" webapp_image.pkr.hcl | grep -o 'webapp-golden-[0-9]\+-[0-9]\+-[0-9]\+-[0-9]\+-[0-9]\+--image')
    #     # echo "PACKER_IMAGE_NAME=$IMAGE_NAME" >> $GITHUB_ENV
    #     # echo "::set-output name=PACKER_IMAGE_NAME::$IMAGE_NAME"
    #     IMAGE_NAME=$(packer build -var "binary_path=${BINARY_PATH}" webapp_image.pkr.hcl | tee /dev/tty | grep -o 'webapp-golden-[0-9]\+-[0-9]\+-[0-9]\+-[0-9]\+-[0-9]\+--image')
    #     if [ -z "$IMAGE_NAME" ]; then
    #       echo "Failed to extract image name from Packer output."
    #       exit 1
    #     fi
    #   working-directory: ./custom_image
    #   env:
    #     BINARY_PATH: ../artifact/webapp

    - name: Create dummy packer output file
      run: |
        touch ./packer_output.txt
      working-directory: ./custom_image

    - name: Debug current working directory 1
      run: |
        pwd

    - name: Run Packer to build the image
      run: |
        packer build -var "binary_path=${BINARY_PATH}" webapp_image.pkr.hcl | tee packer_output.txt
      working-directory: ./custom_image
      env:
        BINARY_PATH: ../artifact/webapp
    
    - name: Debug current working directory 2
      run: |
        pwd

    - name: Display packer_output.txt content
      run: cat packer_output.txt
      working-directory: ./custom_image
      
    - name: Extract image name
      run: |
        ls -alrt
        pwd
        # IMAGE_NAME=$(grep -o 'webapp-golden-[0-9]\+-[0-9]\+-[0-9]\+-[0-9]\+-[0-9]\+--image' packer_output.txt)
        IMAGE_NAME=$(grep -Eo 'webapp-golden-[0-9]{4}-[0-9]{2}-[0-9]{2}-[0-9]{2}-[0-9]{2}-[0-9]{2}--image' packer_output.txt)
        if [ -z "$IMAGE_NAME" ]; then
          echo "Failed to extract image name from Packer output."
          exit 1
        fi
        echo "PACKER_IMAGE_NAME=$IMAGE_NAME" >> $GITHUB_ENV
        echo "::set-output name=PACKER_IMAGE_NAME::$IMAGE_NAME"
      working-directory: ./custom_image
    
    - name: Describe the managed instance group
      id: describe_instance_group
      run: |
        OUTPUT=$(gcloud compute instance-groups managed describe $INSTANCE_GROUP_NAME --region $REGION --format="value(versions[0].instanceTemplate)")
        echo "Instance template URL: $OUTPUT"
        echo "::set-output name=instance_template_url::$OUTPUT"
      env:
        # GCP_PROJECT: csye6225-dev-414220
        REGION: us-east1
        INSTANCE_GROUP_NAME: webapp-group

    - name: Describe the instance template
      run: |
        INSTANCE_TEMPLATE_URL="${{ steps.describe_instance_group.outputs.instance_template_url }}"
        gcloud compute instance-templates describe $INSTANCE_TEMPLATE_URL --format=json > existing_template_config.json
        ls -alrt
        pwd
        chmod +x existing_template_config.json
      working-directory: ./custom_image

    - name: Set executable permission for create template script
      run: |
        ls -alrt
        pwd
        chmod +x create_new_template.sh
      working-directory: ./custom_image

    - name: Execute gcloud create instance script
      id: create_instance_template
      run: |
        ls -alrt
        pwd
        # ./create_new_template.sh
        OUTPUT_TEMP=$(./create_new_template.sh)
        echo "New template created: $OUTPUT"
        echo "::set-output name=new_template_name::$OUTPUT_TEMP"
      working-directory: ./custom_image
      env:
        PACKER_IMAGE_NAME: ${{ env.PACKER_IMAGE_NAME }}

    # - name: Create a new instance template with the updated image
    #   env:
    #       INSTANCE_GROUP_NAME: ${{ secrets.DEFAULT_INSTANCE_GROUP_NAME }}
    #       REGION: ${{ secrets.REGION }}
    #       # PACKER_IMAGE_NAME: ${{ secrets.CUSTOM_IMAGE_NAME }}
    #       PACKER_IMAGE_NAME: ${{ env.PACKER_IMAGE_NAME }}
    #       EXISTING_TEMPLATE_NAME: ${{ secrets.OLD_TEMPLATE_NAME}}
    #   run: |
    #     NEW_TEMPLATE_NAME="webapp-template-$(date +%Y%m%d%H%M%S)"
    #     echo "Creating new instance template: $NEW_TEMPLATE_NAME"
    #     gcloud compute instance-templates create ${NEW_TEMPLATE_NAME} \
    #       --region=${REGION} \
    #       --source-instance-template=${EXISTING_TEMPLATE_NAME} \
    #       --image=${PACKER_IMAGE_NAME}

    # - name: Describe the managed instance group with new instance template
    #   id: describe_instance_template
    #   run: |
    #     OUTPUT_TEMP=$(gcloud compute instance-groups managed describe $INSTANCE_GROUP_NAME --region $REGION --format="value(versions[0].instanceTemplate)")
    #     echo "NEW Instance template URL: $OUTPUT_TEMP"
    #     echo "::set-output name=instance_template_url::$OUTPUT_TEMP"
    #   env:
    #     # GCP_PROJECT: csye6225-dev-414220
    #     REGION: us-east1
    #     INSTANCE_GROUP_NAME: webapp-group

    - name: Update the managed instance group to use the new template
      env:
        INSTANCE_GROUP_NAME: ${{ secrets.DEFAULT_INSTANCE_GROUP_NAME }}
        REGION: ${{ secrets.REGION }}
      run: |
        INSTANCE_TEMPLATE_URL="${{ steps.describe_instance_group.outputs.instance_template_url }}"
        gcloud compute instance-groups managed set-instance-template ${INSTANCE_GROUP_NAME} \
          --template=${INSTANCE_TEMPLATE_URL} \
          --region=${REGION}

    - name: Recreate instances in the managed instance group
      env:
          INSTANCE_GROUP_NAME: ${{ secrets.DEFAULT_INSTANCE_GROUP_NAME }}
          REGION: ${{ secrets.REGION }}
      run: |
        INSTANCE_TEMPLATE_URL="${{ steps.describe_instance_group.outputs.instance_template_url }}"
        gcloud compute instance-groups managed rolling-action start-update ${INSTANCE_GROUP_NAME} \
          --version template=${INSTANCE_TEMPLATE_URL} \
          --region=${REGION} \
          --type=proactive

    - name: Poll for the update operation status
      run: |
        STATUS="RUNNING"
        while [ "$STATUS" = "RUNNING" ]; do
          STATUS=$(gcloud compute operations list --filter="operationType=update AND targetLink:${INSTANCE_GROUP_NAME} AND status=RUNNING" --format="value(status)" --limit=1)
          echo "Current status: $STATUS"
          sleep 10
        done
